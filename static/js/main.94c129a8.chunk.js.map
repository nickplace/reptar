{"version":3,"sources":["logo-white.png","logo.svg","Typeout.js","Console.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Typeout","props","state","currentString","displayCarat","loopTypewriter","bind","typewriter","this","index","typewriterStrings","length","setState","string","wordIndex","config","delayBetweenLetters","delayBetweenWords","setTimeout","callback","character","displayString","displayCaret","caretType","caretStyle","className","React","Component","Console","commandQueue","currentCommand","currentDOM","commands","nextCommand","window","scrollTo","input","e","command","dom","prompt","CONSOLE_TYPE_SPEED","blinkCaret","promptFinished","type","buttons","options","map","option","class","onClick","handleOptionSelected","push","suffix","cta","currentDom","DOMFromCommand","slice","App","src","Reptar","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,wC,+GCA3CD,EAAOC,QAAU,IAA0B,kC,uJCyE5BC,G,kBArEX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAEDC,MAAQ,CACTC,cAAe,GACfC,cAAc,GAGlB,EAAKC,eAAiB,EAAKA,eAAeC,KAApB,gBACtB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBATH,E,iFAcfE,KAAKH,eAAe,K,qCAGTI,GAEPA,GAASD,KAAKP,MAAMS,kBAAkBC,SACtCF,EAAQ,GAIZD,KAAKI,SAAS,CAAET,cAAe,KAG/B,IAAIU,EAASL,KAAKP,MAAMS,kBAAkBD,GAC1CD,KAAKD,WAAWM,EAAQ,EAAGJ,K,iCAKpBI,EAAQJ,EAAOK,GAAY,IAAD,SACkBN,KAAKP,MAAMc,OAAtDC,EADyB,EACzBA,oBADyB,EACJC,kBAE7B,GAAIR,GAASI,EAAOF,OAQhB,OANAO,YAAW,WACP,EAAKN,SAAS,CAAER,cAAc,IAC9B,EAAKH,MAAMc,OAAOI,aACG,GAAtBH,EAA0BR,WAC7BA,KAAKI,SAAS,CAAET,cAAeK,KAAKN,MAAMC,cAAgB,OAK9D,IAAIiB,EAAYP,EAAOJ,GACnBY,EAAgBb,KAAKN,MAAMC,eAAiBiB,EAChDZ,KAAKI,SAAS,CAAET,cAAekB,IAG/BH,WAAWV,KAAKD,WAAWD,KAAK,KAAMO,IAAUJ,EAAOK,GAAYE,K,+BAG7D,IAAD,EAC2CR,KAAKP,MAAMc,OADtD,EACGO,aADH,EACiBC,UADjB,EAC4BC,WACjC,OACI,yBAAKC,UAAWjB,KAAKP,MAAMwB,WACtBjB,KAAKN,MAAMC,cACVK,KAAKN,MAAME,cACT,0BAAMqB,UAAU,wB,GA9DdC,IAAMC,YCuHbC,G,wBAvGX,WAAY3B,GAAQ,IAAD,8BACf,4CAAMA,KAPVC,MAAQ,CACJ2B,aAAc,GACdC,eAAgB,KAChBC,WAAY,IAKZ,EAAK7B,MAAM2B,aAAe,EAAK5B,MAAM+B,SAFtB,E,iFAOfxB,KAAKyB,cACLf,YAAW,WACPgB,OAAOC,SAAS,EAAG,KACpB,O,uCAIW,IAAD,OACR3B,KAAKN,MAAM4B,eAAeM,OACvB5B,KAAKN,MAAM2B,aAAalB,OAAS,GACjCO,YAAW,kBAAM,EAAKe,gBA3BT,KA2B8CzB,Q,2CAIlD6B,GACjB7B,KAAKyB,gB,qCAGMK,GAAU,IAAD,OAChBC,EAAM,CACN,kBAAC,EAAD,CAASd,UAAU,UAAUf,kBAAmB,CAC5C4B,EAAQE,QACTzB,OAAQ,CACPC,oBAzCW,GA0CXC,kBAAmBwB,IACnBC,YAAY,EACZnB,UAAW,WACXJ,SAAU,SAACkB,GAAD,OAAO,EAAKM,eAAeN,QAK7C,GAAIC,EAAQF,OAA+B,SAAtBE,EAAQF,MAAMQ,KAAiB,CAChD,IAAIC,EAAUP,EAAQF,MAAMU,QAAQC,KAAI,SAACC,GAAD,OAAY,uBAAGC,MAAM,SAASC,QAAS,SAAAb,GAAC,OAAI,EAAKc,qBAAqBd,KAAKW,MACnHT,EAAIa,KACA,yBAAK3B,UAAU,mBACVoB,IAMb,GAAIP,EAAQF,OAA+B,UAAtBE,EAAQF,MAAMQ,KAAkB,CACjD,IAAIR,EAAQ,CAAC,2BAAOQ,KAAK,SAASS,OAAO,UAEzCd,EAAIa,KACA,yBAAK3B,UAAU,eACVW,IAeb,OAVIE,EAAQgB,KAERf,EAAIa,KACA,uBAAG3B,UAAU,eACRa,EAAQgB,MAMd,yBAAKL,MAAM,WAAWV,K,oCAO7B,IAAIT,EAAiBtB,KAAKN,MAAM2B,aAAa,GACzC0B,EAAa/C,KAAKgD,eAAe1B,GAErCtB,KAAKI,SAAS,CACVkB,eAAgBA,EAChBD,aAAcrB,KAAKN,MAAM2B,aAAa4B,MAAM,EAAGjD,KAAKN,MAAM2B,aAAalB,QACvEoB,WAAW,GAAD,mBACHvB,KAAKN,MAAM6B,YADR,CAENwB,Q,2CAMSlB,GACjB7B,KAAKyB,gB,+BAIL,OACI,yBAAKR,UAAU,WACVjB,KAAKN,MAAM6B,gB,GAxGNL,IAAMC,Y,oCCoDb+B,MAzDf,WACE,OACE,yBAAKjC,UAAU,OACb,yBAAKwB,MAAM,cAAcU,IAAKC,MAC9B,kBAAC,EAAD,CACE5B,SAAU,CACR,CACEQ,OAAQ,0DAEV,CACEA,OAAQ,oEAEV,CACEA,OAAQ,uDACRJ,MAAO,CACLQ,KAAM,QACNE,QAAS,CAAC,qBAAsB,mBAAoB,0BAIxD,CACEN,OAAQ,uDAEV,CACEA,OAAQ,sCACRJ,MAAO,CACLQ,KAAM,QACNE,QAAS,CAAC,cAAe,cAAe,YAAa,uBAGzD,CACEN,OAAQ,uCACRJ,MAAO,CACLQ,KAAM,QACNE,QAAS,CAAC,UAAW,YAAa,YAAa,YAAa,aAGhE,CACEN,OAAQ,2BAEV,CACEA,OAAQ,iEACRJ,MAAO,CACLQ,KAAM,QACNE,QAAS,CAAC,uBAAwB,QAAS,SAAU,cAAe,2BAGxE,CACEN,OAAQ,oCC3CAqB,QACW,cAA7B3B,OAAO4B,SAASC,UAEe,UAA7B7B,OAAO4B,SAASC,UAEhB7B,OAAO4B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.94c129a8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo-white.185d9170.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport './Typeout.css';\n\nclass Typeout extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            currentString: '', // Current string being displayed,\n            displayCarat: true\n        };\n\n        this.loopTypewriter = this.loopTypewriter.bind(this);\n        this.typewriter = this.typewriter.bind(this);\n    }\n\n    componentDidMount() {\n        // Once the component has mounted, start the typewriter animation\n        this.loopTypewriter(0);\n    }\n\n    loopTypewriter(index) {\n        // First make sure that the given index is valid\n        if (index >= this.props.typewriterStrings.length) {\n            index = 0;\n        }\n\n        // Remove the old string\n        this.setState({ currentString: '' });\n\n        // start a typewriter animation for the next string in the array\n        let string = this.props.typewriterStrings[index];\n        this.typewriter(string, 0, index);\n    }\n\n    // types one character in the typwriter\n    // keeps calling itself until the string is finished\n    typewriter(string, index, wordIndex) {\n        const { delayBetweenLetters, delayBetweenWords } = this.props.config;\n\n        if (index >= string.length) {\n            // Reset the typewriter with the next string\n            setTimeout(() => {\n                this.setState({ displayCarat: false });\n                this.props.config.callback()\n            }, delayBetweenLetters * 10, this)\n            this.setState({ currentString: this.state.currentString + \"\\n\" });\n\n            return;\n        }\n\n        let character = string[index];\n        let displayString = this.state.currentString += character;\n        this.setState({ currentString: displayString });\n\n        // Wait a bit in between characters\n        setTimeout(this.typewriter.bind(null, string, ++index, wordIndex), delayBetweenLetters);\n    }\n\n    render() {\n        const { displayCaret, caretType, caretStyle } = this.props.config;\n        return (\n            <div className={this.props.className}>\n                {this.state.currentString}\n                {(this.state.displayCarat) &&\n                    <span className=\"vertical-caret\">\n                    </span>\n                }\n            </div>\n        );\n    }\n}\n\nexport default Typeout;\n","\n\n\nimport React from 'react';\nimport Typeout from './Typeout'\nimport Typewriter from 'typewriter-effect';\nimport './Console.css';\n\nconst CONSOLE_TYPE_SPEED = 60;\nconst CONSOLE_PAUSE_LENGTH = 2500;\n\n\nclass Console extends React.Component {\n    state = {\n        commandQueue: [],\n        currentCommand: null,\n        currentDOM: []\n    }\n\n    constructor(props) {\n        super(props);\n        this.state.commandQueue = this.props.commands;\n    }\n\n\n    componentDidMount() {\n        this.nextCommand()\n        setTimeout(function () {\n            window.scrollTo(0, 1);\n        }, 1000);\n\n    }\n\n    promptFinished() {\n        if (!this.state.currentCommand.input) {\n            if (this.state.commandQueue.length > 0)\n                setTimeout(() => this.nextCommand(), CONSOLE_PAUSE_LENGTH, this)\n        }\n    }\n\n    handleOptionSelected(e) {\n        this.nextCommand()\n    }\n\n    DOMFromCommand(command) {\n        var dom = [\n            <Typeout className=\"typeout\" typewriterStrings={[\n                command.prompt\n            ]} config={{\n                delayBetweenLetters: CONSOLE_TYPE_SPEED,\n                delayBetweenWords: CONSOLE_TYPE_SPEED * 10,\n                blinkCaret: true,\n                caretType: 'vertical',\n                callback: (e) => this.promptFinished(e)\n            }}\n            />\n        ]\n\n        if (command.input && command.input.type == \"radio\") {\n            var buttons = command.input.options.map((option) => <a class=\"option\" onClick={e => this.handleOptionSelected(e)}>{option}</a>)\n            dom.push(\n                <div className=\"multiple-choice\">\n                    {buttons}\n                </div>\n            )\n        }\n\n\n        if (command.input && command.input.type == \"number\") {\n            var input = [<input type=\"number\" suffix=\" mpg\"></input>]\n\n            dom.push(\n                <div className=\"input-group\">\n                    {input}\n                </div>\n            )\n        }\n\n        if (command.cta) {\n\n            dom.push(\n                <a className=\"command-cta\">\n                    {command.cta}\n                </a>\n            )\n        }\n\n\n        return <div class=\"command\">{dom}</div>\n\n    }\n\n\n    nextCommand() {\n\n        var currentCommand = this.state.commandQueue[0]\n        var currentDom = this.DOMFromCommand(currentCommand)\n\n        this.setState({\n            currentCommand: currentCommand,\n            commandQueue: this.state.commandQueue.slice(1, this.state.commandQueue.length),\n            currentDOM: [\n                ...this.state.currentDOM,\n                currentDom\n            ]\n        })\n    }\n\n\n    handleOptionSelected(e) {\n        this.nextCommand();\n    }\n\n    render() {\n        return (\n            <div className=\"console\">\n                {this.state.currentDOM}\n            </div>\n        );\n    }\n}\n\nexport default Console;\n","import React from 'react';\nimport Console from './Console'\nimport logo from './logo.svg';\nimport './App.css';\nimport Reptar from './logo-white.png'\nimport Brim from 'brim'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <img class=\"reptar-head\" src={Reptar} />\n      <Console\n        commands={[\n          {\n            prompt: \"Every day, US vehicles emit 564 billion pounds of CO2.\"\n          },\n          {\n            prompt: \"Put your best foot forward & own your footprint with Reptar.org.\"\n          },\n          {\n            prompt: \"Reptar.org. Offsets as you go, for pennies per mile.\",\n            input: {\n              type: \"radio\",\n              options: [\"Get a Free Sticker\", \"Download the App\", \"Footprint Calculator\"]\n            }\n\n          },\n          {\n            prompt: \"Get your free footprint sticker after a short quiz.\"\n          },\n          {\n            prompt: \"1. How often do you drive your car?\",\n            input: {\n              type: \"radio\",\n              options: [\"Hardly ever\", \"Once a week\", \"Every day\", \"I commute to work\"]\n            }\n          },\n          {\n            prompt: \"2. What is your average gas mileage?\",\n            input: {\n              type: \"radio\",\n              options: [\"<18 mpg\", \"19-23 mpg\", \"24-27 mpg\", \"28-34 mpg\", \"35+ mpg\",]\n            }\n          },\n          {\n            prompt: \"Calculating...... Done!\"\n          },\n          {\n            prompt: \"It would only cost you $5.66 a month to offset your footprint.\",\n            input: {\n              type: \"radio\",\n              options: [\"Pay with Credit Card\", \"Venmo\", \"PayPal\", \"Credit Card\", \"I just want a sticker\"]\n            }\n          },\n          {\n            prompt: \"Your sticker is on the way.\",\n          }\n        ]}\n\n      ></Console>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}